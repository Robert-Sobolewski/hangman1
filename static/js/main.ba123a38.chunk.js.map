{"version":3,"sources":["screens/HomeScreen.tsx","app/hooks.ts","features/manager/managerSlice.ts","screens/NewScreen.tsx","screens/GameScreen.tsx","screens/WinScreen.tsx","screens/LoseScreen.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["require","HomeScreen","className","href","useAppDispatch","useDispatch","useAppSelector","useSelector","managerSlice","createSlice","name","initialState","category","names","index","guess","reducers","setCategory","state","action","payload","setNames","shuffleNames","sort","Math","random","incrementIndex","floor","length","addGuess","includes","push","actions","selectCategory","manager","selectNames","selectIndex","selectGuess","data","NewScreen","dispatch","useState","useEffect","map","i","to","pathname","onClick","e","filter","linkClick","GameScreen","props","userValue","setUserValue","currentIndex","wrongAnswer","setWrongAnswer","ballClasses","setBallClasses","svg","useRef","dom","Array","from","replaceAll","answer","setAnswer","setTimeout","ref","console","log","join","id","viewBox","height","width","strokeLinejoin","stroke","fill","strokeWidth","d","onSubmit","preventDefault","arr","toLowerCase","updateGuessing","history","autoFocus","autoComplete","type","pattern","maxLength","required","onChange","target","value","color","size","WinScreen","splice","parseInt","match","params","wrong","LoseScreen","App","exact","path","component","fetchCount","amount","Promise","resolve","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","managerReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba123a38.chunk.js","sourcesContent":["import React from \"react\";\r\nrequire(\"./HomeScreen.scss\");\r\n\r\nfunction HomeScreen() {\r\n  return (\r\n    <div className=\"home-screen\">\r\n      <h1>Hangman Game</h1>\r\n      <a className=\"button\" href=\"/new\">\r\n        new game\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {  createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n//import { fetchCount } from './counterAPI';\r\n\r\nexport interface ManagerState {\r\n  category: string,\r\n  names:string[],\r\n  index:number\r\n  guess: string[]\r\n}\r\n\r\nconst initialState: ManagerState = {\r\n  category: \"\",\r\n  names: [],\r\n  index: 0,\r\n  guess:[],\r\n\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\n// export const incrementAsync = createAsyncThunk(\r\n//   'counter/fetchCount',\r\n//   async (amount: number) => {\r\n//     const response = await fetchCount(amount);\r\n//     // The value we return becomes the `fulfilled` action payload\r\n//     return response.data;\r\n//   }\r\n// );\r\n\r\nexport const managerSlice = createSlice({\r\n  name: 'manager',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n      setCategory:(state, action:PayloadAction<string>) =>{\r\n        state.category = action.payload\r\n      },\r\n      setNames:(state, action: PayloadAction<string[]>) =>{\r\n        state.names = action.payload;\r\n      },\r\n      shuffleNames:(state) =>{\r\n        state.names.sort(()=> 0.5-Math.random())\r\n      },\r\n      \r\n      incrementIndex: (state) => {\r\n        state.index = Math.floor(Math.random()*state.names.length)//(1+state.index >= state.names.length)?-1: ++state.index;\r\n\r\n      },\r\n      addGuess: (state, action: PayloadAction<string>) =>{\r\n        if(!state.guess.includes(action.payload))\r\n        state.guess.push(action.payload)\r\n      }\r\n    // increment: (state) => {\r\n    //   // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n    //   // doesn't actually mutate the state because it uses the Immer library,\r\n    //   // which detects changes to a \"draft state\" and produces a brand new\r\n    //   // immutable state based off those changes\r\n    //   state.value += 1;\r\n    // },\r\n    // decrement: (state) => {\r\n    //   state.value -= 1;\r\n    // },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    // incrementByAmount: (state, action: PayloadAction<number>) => {\r\n    //   state.value += action.payload;\r\n    // },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       .addCase(incrementAsync.pending, (state) => {\r\n//         state.status = 'loading';\r\n//       })\r\n//       .addCase(incrementAsync.fulfilled, (state, action) => {\r\n//         state.status = 'idle';\r\n//         state.value += action.payload;\r\n//       });\r\n//   },\r\n});\r\n\r\nexport const { setCategory, setNames, shuffleNames, incrementIndex,\r\naddGuess } = managerSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCategory = (state: RootState) => state.manager.category;\r\nexport const selectNames = (state: RootState) =>state.manager.names;\r\nexport const selectIndex = (state: RootState) =>state.manager.index;\r\nexport const selectGuess = (state: RootState) => state.manager.guess;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\n// export const incrementIfOdd = (amount: number): AppThunk => (\r\n//   dispatch,\r\n//   getState\r\n// ) => {\r\n//   const currentValue = selectCount(getState());\r\n//   if (currentValue % 2 === 1) {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }\r\n// };\r\n\r\nexport default managerSlice.reducer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  selectCategory,\r\n  setCategory,\r\n  setNames,\r\n  shuffleNames,\r\n} from \"../features/manager/managerSlice\";\r\nrequire(\"./NewScreen.scss\");\r\nconst data = require(\"../data/data.json\");\r\n\r\nfunction NewScreen() {\r\n  const dispatch = useAppDispatch();\r\n  const category = useAppSelector(selectCategory);\r\n  const [cat, setCat] = useState([]);\r\n\r\n  useEffect(() => {}, []);\r\n  function render(): any {\r\n    data[\"data\"].map((i: any) => (\r\n      <li>\r\n        {JSON.stringify(i)}\r\n        {/* <a href=\"/\">{i.category}</a> */}\r\n      </li>\r\n    ));\r\n  }\r\n  function linkClick(category: string): void {\r\n    dispatch(setCategory(category));\r\n    dispatch(\r\n      setNames(\r\n        data[\"data\"].filter((i: any) => i.category === category)[0].names\r\n      )\r\n    );\r\n    dispatch(shuffleNames());\r\n  }\r\n  return (\r\n    <div className=\"new-screen bg\">\r\n      <h1>New Game</h1>\r\n      <h3>Select category</h3>\r\n      <ul>\r\n        {data[\"data\"].map((i: any, index: any) => (\r\n          <li>\r\n            <Link\r\n              className=\"button\"\r\n              key={index}\r\n              to={{\r\n                pathname: \"/game/\" + i.category,\r\n              }}\r\n              onClick={(e: any) => linkClick(i.category)}\r\n            >\r\n              {i.category}\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewScreen;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport WordDisplay from \"../components/_wordDisplay/WordDisplay\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  BsEmojiHeartEyesFill,\r\n  BsEmojiSmileFill,\r\n  BsEmojiNeutralFill,\r\n  BsEmojiFrownFill,\r\n  BsEmojiDizzyFill,\r\n} from \"react-icons/bs\";\r\nimport {\r\n  selectCategory,\r\n  selectNames,\r\n  selectIndex,\r\n  selectGuess,\r\n  addGuess,\r\n} from \"../features/manager/managerSlice\";\r\nimport { setTimeout } from \"timers\";\r\n//const data = require(\"../data/data.json\");\r\nrequire(\"./GameScreen.scss\");\r\n\r\nfunction GameScreen(props: any) {\r\n  const [userValue, setUserValue] = useState(\"\"); // actual char\r\n\r\n  const dispatch = useAppDispatch();\r\n  const category = useAppSelector(selectCategory);\r\n  const names = useAppSelector(selectNames);\r\n  const currentIndex = useAppSelector(selectIndex);\r\n  const guess = useAppSelector(selectGuess);\r\n  const [wrongAnswer, setWrongAnswer] = useState(0);\r\n  const [ballClasses, setBallClasses] = useState(\"ball-path0\");\r\n  const svg = useRef(null);\r\n  const dom = useRef(null);\r\n\r\n  const [answer, setAnswer] = useState(\r\n    Array.from(names[currentIndex].replaceAll(/\\w/g, \"_\"))\r\n  );\r\n\r\n  function submitClick(e: any) {\r\n    e.preventDefault();\r\n    dispatch(addGuess(userValue));\r\n    updateGuessing();\r\n    setUserValue(\"\");\r\n    if (wrongAnswer > 4) {\r\n      props.history.push(\"/lose\");\r\n    }\r\n    if (!answer.includes(\"_\")) props.history.push(`/win/${wrongAnswer}`); //(\"/win/\" + { wrongAnswer });\r\n  }\r\n\r\n  function updateGuessing(): void {\r\n    // currentName, userValue(letter), userGuessing\r\n    let arr = Array.from(names[currentIndex].toLowerCase());\r\n    if (!arr.includes(userValue)) {\r\n      setWrongAnswer(wrongAnswer + 1);\r\n    }\r\n    for (let i in arr) {\r\n      if (guess.includes(arr[i])) {\r\n        answer[i] = Array.from(names[currentIndex])[i];\r\n      }\r\n    }\r\n    setAnswer(answer);\r\n  } // end updateGuessing\r\n\r\n  useEffect(() => {\r\n    if (userValue !== \"\") {\r\n      dispatch(addGuess(userValue));\r\n      setAnswer(answer);\r\n    }\r\n  }); //currentName, userValue\r\n  useEffect(() => {\r\n    setBallClasses(\r\n      `${wrongAnswer === 0 ? \"ball \" : \"\"}  ball-path${wrongAnswer} ${\r\n        wrongAnswer !== 0 ? \"ball-anim\" : \"\"\r\n      } ${\"anim-start\"}`\r\n    );\r\n    setTimeout(() => {\r\n      setBallClasses(` ball-path${wrongAnswer} anim-stop`);\r\n    }, 2000);\r\n  }, [wrongAnswer]);\r\n  // const ball = React.cloneElement(\r\n  //   <div className={` ball-path${wrongAnswer}`}></div>\r\n  // );\r\n  return (\r\n    <div ref={dom} className=\"game-screen bg\">\r\n      <h1>\r\n        category: <strong>{category} </strong>{\" \"}\r\n      </h1>\r\n\r\n      {/* <h2>you choose {props.match.params.category}</h2> */}\r\n      <section className=\"wrapper\">\r\n        <div className=\"left\">\r\n          {console.log(names[currentIndex])}\r\n          <h4>{answer.join(\"\")} </h4>\r\n          <hr />\r\n          <p>\r\n            wrong answers: <strong>{wrongAnswer}</strong>{\" \"}\r\n          </p>\r\n        </div>\r\n        <aside className=\"right\">\r\n          <figure>\r\n            {/* {ball} */}\r\n            <div\r\n              id=\"myball\" //{wrongAnswer.toString()}\r\n              className={ballClasses}\r\n            ></div>\r\n            <svg ref={svg} viewBox=\"0 0 400 250\" height=\"100%\" width=\"100%\">\r\n              <path\r\n                className={`draw draw-path1 ${\r\n                  wrongAnswer > 0 ? \"path-anim\" : \"\"\r\n                }`} //\"draw draw-path1\"\r\n                strokeLinejoin=\"round\"\r\n                stroke=\"darkslategray\"\r\n                fill=\"none\"\r\n                strokeWidth=\"5\"\r\n                d=\"M 52.34375,233.98437 56.640625,11.71875 223.82813,10.9375 l -0.39063,12.5\"\r\n              />\r\n              ,\r\n              <path\r\n                className={`draw draw-path1 ${\r\n                  wrongAnswer > 1 ? \"path-anim\" : \"\"\r\n                }`} //\"draw draw-path2\"\r\n                strokeLinejoin=\"round\"\r\n                stroke=\"darkslategray\"\r\n                fill=\"none\"\r\n                strokeWidth=\"5\"\r\n                d=\"M 223.68646,23.436203 A 24.447514,25 0 0 1 248.13385,48.354736 24.447514,25 0 0 1 223.8458,73.435672 24.447514,25 0 0 1 199.24012,48.680601 24.447514,25 0 0 1 223.3678,23.438327\"\r\n              />\r\n              <path\r\n                className={`draw draw-path1 ${\r\n                  wrongAnswer > 2 ? \"path-anim\" : \"\"\r\n                }`} //\"draw draw-path3\"\r\n                strokeLinejoin=\"round\"\r\n                stroke=\"darkslategray\"\r\n                fill=\"none\"\r\n                strokeWidth=\"5\"\r\n                d=\"M 221.48437,73.828125 C 219.14062,173.82812 189.84375,179.6875 189.84375,179.6875\"\r\n              />\r\n              <path\r\n                className={`draw draw-path1 ${\r\n                  wrongAnswer > 3 ? \"path-anim\" : \"\"\r\n                }`} //\"draw draw-path4\"\r\n                strokeLinejoin=\"round\"\r\n                stroke=\"darkslategray\"\r\n                fill=\"none\"\r\n                strokeWidth=\"5\"\r\n                d=\"m 191.01562,111.71875 19.14063,-33.984375 11.32812,-3.90625 7.8125,16.015625 -1.5625,36.32813\"\r\n              />\r\n              <path\r\n                className={`draw draw-path1 ${\r\n                  wrongAnswer > 4 ? \"path-anim\" : \"\"\r\n                }`} //\"draw draw-path5\"\r\n                strokeLinejoin=\"round\"\r\n                stroke=\"darkslategray\"\r\n                fill=\"none\"\r\n                strokeWidth=\"5\"\r\n                d=\"m 173.82812,207.42187 19.53125,-11.32812 -3.51562,-16.40625 -8.98438,12.10937 -25.39062,4.29688\"\r\n              />\r\n            </svg>\r\n          </figure>\r\n        </aside>\r\n      </section>\r\n      <div className=\"bottom\">\r\n        <div className=\"bottom-left\">\r\n          <h4>type your answer </h4>\r\n          <form onSubmit={submitClick}>\r\n            <input\r\n              autoFocus={true}\r\n              autoComplete={\"off\"}\r\n              type=\"text\"\r\n              pattern={\"[a-zA-Z]\"}\r\n              maxLength={1}\r\n              required\r\n              onChange={(e) => {\r\n                setUserValue(e.target.value);\r\n              }}\r\n              name=\"\"\r\n              id=\"answer\"\r\n              value={userValue}\r\n            />\r\n            <input type=\"submit\" value=\"Enter\" />\r\n          </form>\r\n        </div>\r\n        {/* end bottom-left */}\r\n        <div className=\"bottom-right\">\r\n          {wrongAnswer > 4 ? (\r\n            <BsEmojiDizzyFill color={\"red\"} size={70} />\r\n          ) : wrongAnswer > 3 ? (\r\n            <BsEmojiFrownFill color={\"orange\"} size={70} />\r\n          ) : wrongAnswer > 2 ? (\r\n            <BsEmojiNeutralFill color={\"yellow\"} size={70} />\r\n          ) : wrongAnswer > 1 ? (\r\n            <BsEmojiSmileFill color={\"blue\"} size={70} />\r\n          ) : (\r\n            <BsEmojiHeartEyesFill color={\"green\"} size={70} />\r\n          )}\r\n          {/* <BsEmojiHeartEyesFill size={70} /> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameScreen;\r\n","import React from \"react\";\r\nimport { BsStarFill, BsStar } from \"react-icons/bs\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nrequire(\"./WinScreen.scss\");\r\n\r\nfunction WinScreen(props: any) {\r\n  const arr: any[] = Array(5).fill(<BsStarFill color=\"gold\" size={70} />);\r\n  arr.splice(\r\n    5 - parseInt(props.match.params.wrong),\r\n    parseInt(props.match.params.wrong),\r\n    Array(parseInt(props.match.params.wrong)).fill(\r\n      <BsStar color=\"gold\" size={70} />\r\n    )\r\n    // <BsStar color=\"gold\" size={70} />,\r\n    // <BsStar color=\"gold\" size={70} />\r\n  );\r\n  return (\r\n    <div className=\"bg win-screen\">\r\n      <h1>Congratulation You Won !!!</h1>\r\n      <h3>mistakes {props.match.params.wrong}</h3>\r\n      <p>{arr.map((i) => i)}</p>\r\n\r\n      <br />\r\n      <h2>Would you like play again?</h2>\r\n      <Link className=\"button\" to={\"/\"}>\r\n        Yes\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WinScreen;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../app/hooks\";\r\nimport { selectIndex, selectNames } from \"../features/manager/managerSlice\";\r\nrequire(\"./LoseScreen.scss\");\r\n\r\nfunction LoseScreen() {\r\n  const names = useAppSelector(selectNames);\r\n  const currentIndex = useAppSelector(selectIndex);\r\n  return (\r\n    <div className=\"bg lose-screen\">\r\n      <h1>Better Luck next time! </h1>\r\n\r\n      <br />\r\n      <h2>\r\n        Correct answer is: <span>{names[currentIndex]}</span>{\" \"}\r\n      </h2>\r\n      <br />\r\n      <h2>Would you like play again?</h2>\r\n      <Link className=\"button\" to={\"/\"}>\r\n        Yes\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoseScreen;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\nimport \"./App.scss\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport NewScreen from \"./screens/NewScreen\";\nimport GameScreen from \"./screens/GameScreen\";\nimport WinScreen from \"./screens/WinScreen\";\nimport LoseScreen from \"./screens/LoseScreen\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={HomeScreen} />\n          <Route exact path=\"/new\" component={NewScreen} />\n          <Route exact path=\"/game/:category\" component={GameScreen} />\n          <Route exact path=\"/win/:wrong\" component={WinScreen} />\n          <Route exact path=\"/lose\" component={LoseScreen} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport managerReducer from '../features/manager/managerSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    manager: managerReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.scss\";\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}